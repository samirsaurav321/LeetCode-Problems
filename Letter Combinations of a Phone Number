"""
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.



"""

class Solution:
    def letterCombinations(self, digits):
        """
        :type digits: str
        :rtype: List[str]
        """
        
        
        self.lookup = {"0":"", "1":"", "2":"abc", "3":"def", "4":"ghi", "5":"jkl", "6":"mno","7":"pqrs","8":"tuv", "9":"wxyz"}
        res = []
        def traverse(i, path):
            if i == len(digits):
                res.append(path)
                return
            for c in self.lookup[digits[i]]:
                traverse(i+1, path + c)
        if len(digits) == 0:
            return []
        traverse(0, "")
        return res
        
if __name__=='__main__':

    s = Solution

    digits = "23"

    print(s.letterCombinations(s, digits))
    
    # output --> ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]
